# .cursorrules

## General 
- Prefer reusing existing code over writing new code.
- Avoid patterns that require coming up with new names for things.
- Prefer colocation whenever possible. Moving code further from where it is used is neither clean nor simple. 
- Never use multiple arguments in a function, always use an object.
- Never use window.confirm, window.prompt, or similar browser APIs.

## Typescript

- NEVER use typescript enums, always use inline string unions instead.
- Do not use interfaces
- NEVER define types, prefer inline types.

## React 
- Avoid setting boolean states. Always use an enum (as a string union). It is sometimes ok to derive booleans from enums, using either the `is` or `should` prefix. 
- NEVER update state variables in useEffect. This is always a bug. Derive these values during render. 
- NEVER create separate event handler functions like handleClick or handleSubmit. ALWAYS inline these handlers.
- do not make "render" functions that simply move JSX to a variable. keep it colocated with the component.

## XState 5

We're using XState 5, so use the new syntax
```diff
- assign((context, event) => {
+ assign(({ event }) => {
```

## Global Rules
- At the end of every conversation, review what was learned or decided and write it to this file.
- Each repository has its own dedicated section to track decisions, progress, and next steps.
- Use timestamps for all entries in the format **YYYY-MM-DD**.
- For decisions, use ADR (Architecture Decision Record) format with Context, Decision, and Consequences.

### Format Template
#### Progress
- **YYYY-MM-DD**: [Description of progress made]

#### Decisions
- **YYYY-MM-DD**: [Title]
  - **Context**: [Why this decision was needed]
  - **Decision**: [What was decided]

#### Next Steps
1. [Numbered list of next actions]

---

## Project Logs

### Repo: webapp
#### Progress
- **2024-12-07**: Implemented reusable replicate function for client-side caching strategy.
- **2024-12-07**: Updated icon library route with new caching pattern.

#### Decisions
- **2024-12-07**: Client-side Caching Strategy
  - **Context**: Needed efficient data access and offline capabilities for icon library.
  - **Decision**: Implemented dual-layer caching with memory and localForage.

#### Next Steps
1. Implement replicate pattern in other routes requiring client-side caching
2. Add error boundaries and retry mechanisms
3. Develop cache invalidation triggers for specific events
